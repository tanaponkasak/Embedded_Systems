//=================================================================================================
// ETT_MCP342x.cpp
//=================================================================================================

//=================================================================================================
#include "ETT_MCP342x.h"
//=================================================================================================

/******************************************
 * Default constructor, uses default I2C address.
 * @see MCP342X_DEFAULT_ADDRESS
 */
ETT_MCP342X::ETT_MCP342X() 
{
  //===============================================================================================  
  _devAddr = MCP342X_DEFAULT_ADDRESS;
  //===============================================================================================
}

/******************************************
 * Specific address constructor.
 * @param address I2C address
 * @see MCP342X_DEFAULT_ADDRESS
 * @see MCP342X_A0GND_A1GND, etc.
 */
ETT_MCP342X::ETT_MCP342X(uint8_t address) 
{
  //===============================================================================================
  _devAddr = address;
  //===============================================================================================
}

/******************************************
 * Verify the I2C connection.
 * Make sure the device is connected and responds as expected.
 * @return True if connection is valid, false otherwise
 */
bool ETT_MCP342X::testConnection() 
{
  //===============================================================================================
  Wire.beginTransmission(_devAddr);
  //===============================================================================================
  return (Wire.endTransmission() == 0);
  //===============================================================================================
}


/******************************************
 * Set the configuration shadow register
 */
void ETT_MCP342X::setConfig(uint8_t configData) 
{
  //===============================================================================================
  _configRegShdw = configData;
  //===============================================================================================
}

/******************************************
 * Get the configuration shadow register
 */
uint8_t ETT_MCP342X::getConfigRegShdw(void) 
{
  //===============================================================================================
  return _configRegShdw;
  //===============================================================================================
}

/******************************************
 * Get the step size based on the configuration shadow register
 */
/*float MCP342X::getStepSize(void) {
  uint8_t select = configRegShdw & (MCP342X_SIZE_MASK | MCP342X_GAIN_MASK);
  return stepSizeTbl[select];
}*/

/******************************************
 * Start a conversion using configuration settings from
 * the shadow configuration register
 */
bool ETT_MCP342X::startConversion(void) 
{
  //===============================================================================================
  Wire.beginTransmission(_devAddr);
  //===============================================================================================
  Wire.write(_configRegShdw | MCP342X_RDY);
  //===============================================================================================
  return (Wire.endTransmission() == 0);
  //===============================================================================================
}

 
/******************************************
 * Start a conversion using configuration settings from
 * the shadow configuration register substituting the
 * supplied channel
 */
bool ETT_MCP342X::startConversion(uint8_t channel) 
{
  //===============================================================================================
  Wire.beginTransmission(_devAddr);
  //===============================================================================================
  _configRegShdw = ((_configRegShdw & ~MCP342X_CHANNEL_MASK) | (channel & MCP342X_CHANNEL_MASK));
  //===============================================================================================                
  Wire.write(_configRegShdw | MCP342X_RDY);
  //===============================================================================================
  return (Wire.endTransmission() == 0);
  //===============================================================================================
}

 
/******************************************
 * Read the conversion value (12, 14 or 16 bit)
 *  Spins reading status until ready then
 *  fills in the supplied location with the 16-bit (two byte)
 *  conversion value and returns the status byte
 *  Note: status of -1 "0xFF' implies read error
 */
uint8_t ETT_MCP342X::getResult(int16_t *dataPtr) 
{
  //===============================================================================================
  uint8_t adcStatus;
  //===============================================================================================

  //===============================================================================================
  if((_configRegShdw & MCP342X_SIZE_MASK) == MCP342X_SIZE_18BIT) 
  {
    //=============================================================================================
    return 0xFF;
    //=============================================================================================  
  }
  //===============================================================================================

  //===============================================================================================
  do 
  {
    //=============================================================================================
    // Reading From The MCP3422/3/4 With 12-Bit to 16-Bit Modes
    //=============================================================================================
    if(Wire.requestFrom(_devAddr,(uint8_t)3) == 3) 
    {
      //===========================================================================================
      ((char*)dataPtr)[1] = Wire.read();                                                          // 1st Byte = Upper
      //===========================================================================================
      ((char*)dataPtr)[0] = Wire.read();                                                          // 2nd Byte = Lower
      //===========================================================================================
      adcStatus = Wire.read();                                                                    // 3rd Byte = Config
      //===========================================================================================
    }
    else 
    {
      //===========================================================================================
      return 0xFF;
      //===========================================================================================
    }
    //=============================================================================================
  }while((adcStatus & MCP342X_RDY) != 0x00);                                                      // wait Output register has been updated with the latest conversion result
  //===============================================================================================
  
  //===============================================================================================
  return adcStatus;
  //===============================================================================================
}

/******************************************
 * Read the conversion value (18 bit)
 *  Spins reading status until ready then
 *  fills in the supplied location (32 bit) with
 *  the 24-bit (three byte) conversion value
 *  and returns the status byte
 *  Note: status of -1 "0xFF' implies read error
 */
uint8_t ETT_MCP342X::getResult(int32_t *dataPtr) 
{
  //===============================================================================================
  uint8_t adcStatus;
  //===============================================================================================

  //===============================================================================================
  if((_configRegShdw & MCP342X_SIZE_MASK) != MCP342X_SIZE_18BIT) 
  {
    //=============================================================================================
    return 0xFF;
    //=============================================================================================
  }
  //===============================================================================================

  //===============================================================================================
  do 
  {
    //=============================================================================================
    if(Wire.requestFrom((uint8_t) _devAddr, (uint8_t) 4) == 4) 
    {
      //===========================================================================================
      // Reading From The MCP3422/3/4 With 18-Bit Mode
      //===========================================================================================
      //===========================================================================================
      ((char*)dataPtr)[3] = Wire.read();                                                          // 1st Byte = MSB
      //===========================================================================================
      ((char*)dataPtr)[2] = Wire.read();                                                          // 2nd Byte = Middle
      //===========================================================================================
      ((char*)dataPtr)[1] = Wire.read();                                                          // 3rd Byte = LSB    
      //===========================================================================================
      adcStatus = Wire.read();                                                                    // 4th Byte = Config
      //===========================================================================================
    }
    else 
    {
      //===========================================================================================
      return 0xFF;
      //===========================================================================================
    }
    //=============================================================================================
  }while((adcStatus & MCP342X_RDY) != 0x00);                                                      // wait Output register has been updated with the latest conversion result
  //===============================================================================================
  
  //===============================================================================================
  *dataPtr = (*dataPtr)>>8;
  //===============================================================================================
  return adcStatus;
  //===============================================================================================
}

/******************************************
 * Check to see if the conversion value (12, 14 or 16 bit)
 *  is available.  If so, then
 *  fill in the supplied location with the 16-bit (two byte)
 *  conversion value and status the config byte
 *  Note: status of -1 "0xFF' implies read error
 */
uint8_t ETT_MCP342X::checkforResult(int16_t *dataPtr) 
{
  //===============================================================================================
  uint8_t adcStatus;
  //===============================================================================================

  //===============================================================================================
  if((_configRegShdw & MCP342X_SIZE_MASK) == MCP342X_SIZE_18BIT) 
  {
    //=============================================================================================
    return 0xFF;
    //=============================================================================================
  }
  //===============================================================================================

  //===============================================================================================
  if(Wire.requestFrom(_devAddr, (uint8_t) 3) == 3) 
  {
    //=============================================================================================
    ((char*)dataPtr)[1] = Wire.read();                                                            // 1st Byte = Upper
    //=============================================================================================
    ((char*)dataPtr)[0] = Wire.read();                                                            // 2nd Byte = Lower
    //=============================================================================================
    adcStatus = Wire.read();                                                                      // 3rd Byte = Config
    //=============================================================================================
  }
  else 
  {
    //=============================================================================================
    return 0xFF;
    //=============================================================================================
  }
  //===============================================================================================

  //===============================================================================================
  return adcStatus;
  //===============================================================================================
}

/******************************************
 * Check to see if the conversion value (18 bit)
 *  is available.  If so, then
 *  fill in the supplied location (32 bit) with
 *  the 24-bit (three byte) conversion value
 *  and return the status byte
 *  Note: status of -1 "0xFF' implies read error
 */
uint8_t ETT_MCP342X::checkforResult(int32_t *dataPtr) 
{
  //===============================================================================================
  uint8_t adcStatus;
  //===============================================================================================

  //===============================================================================================
  if((_configRegShdw & MCP342X_SIZE_MASK) != MCP342X_SIZE_18BIT) 
  {
    return 0xFF;
  }
  //===============================================================================================

  //===============================================================================================
  if(Wire.requestFrom((uint8_t) _devAddr, (uint8_t) 4) == 4) 
  {
    //=============================================================================================
    ((char*)dataPtr)[3] = Wire.read();                                                            // 1st Byte = MSB
    //=============================================================================================
    ((char*)dataPtr)[2] = Wire.read();                                                            // 2nd Byte = Middle
    //=============================================================================================
    ((char*)dataPtr)[1] = Wire.read();                                                            // 3rd Byte = LSB   
    //=============================================================================================
    adcStatus = Wire.read();                                                                      // 4th Byte = Config       
    //=============================================================================================
  }
  else 
  {
    //=============================================================================================
    return 0xFF;
    //=============================================================================================
  }
  //===============================================================================================

  //===============================================================================================
  *dataPtr = (*dataPtr)>>8;
  //===============================================================================================
  return adcStatus;
  //===============================================================================================
}

